name: Deploy to EKS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}

jobs:
  deploy:
    name: Build & Push image to ECR & Deploy to EKS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate image tag (app + timestamp + commit)
        id: metadata
        run: |
          APP_NAME="fiap_sa_product_service"
          TIMESTAMP="$(date +'%Y%m%d-%H%M%S')"
          COMMIT="${GITHUB_SHA::7}"
          echo "TAG=${APP_NAME}-${TIMESTAMP}-${COMMIT}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image (APP)
        run: |
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.TAG }}"
          docker build --target release -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Build and push image (MIGRATE)
        run: |
          IMAGE_MIGRATE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.TAG }}_migrate"
          docker build --target migrate -t $IMAGE_MIGRATE_URI .
          docker push $IMAGE_MIGRATE_URI
          echo "IMAGE_MIGRATE_URI=$IMAGE_MIGRATE_URI" >> $GITHUB_ENV

      - name: Install kubectl
        uses: azure/setup-kubectl@v3

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Replace envs in Kubernetes manifests
        env:
          IMAGE_URI: ${{ env.IMAGE_URI }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
        run: |
          export DB_NAME_B64=$(echo -n "$DB_NAME" | base64 | tr -d '\n')
          export DB_USER_B64=$(echo -n "$DB_USER" | base64 | tr -d '\n')
          export DB_PASSWORD_B64=$(echo -n "$DB_PASSWORD" | base64 | tr -d '\n')
          export DB_HOST_B64=$(echo -n "$DB_HOST" | base64 | tr -d '\n')
          envsubst < k8s/secrets.tmpl.yml > k8s/secrets.yml
          envsubst < k8s/deployments.tmpl.yml > k8s/deployments.yml

      - name: Validate Kubernetes manifests
        run: |
          kubectl apply --dry-run=client -f k8s/config-map.yml
          kubectl apply --dry-run=client -f k8s/secrets.yml
          kubectl apply --dry-run=client -f k8s/deployments.yml
          kubectl apply --dry-run=client -f k8s/services.yml
          kubectl apply --dry-run=client -f k8s/hpa-api.yml

      - name: Run Migrations
        env:
          IMAGE_MIGRATE_URI: ${{ env.IMAGE_MIGRATE_URI }}
        run: |
          MIGRATE_JOB_NAME="migrate-${{ github.run_id }}"
          kubectl run "$MIGRATE_JOB_NAME" \
            --image="${IMAGE_MIGRATE_URI}" \
            --restart=Never \
            --rm -i --tty \
            --env="DB_USER=${{ secrets.DB_USER }}" \
            --env="DB_PASSWORD=${{ secrets.DB_PASSWORD }}" \
            --env="DB_NAME=${{ secrets.DB_NAME }}" \
            --env="DB_HOST=${{ secrets.DB_HOST }}"

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f k8s/config-map.yml
          kubectl apply -f k8s/secrets.yml
          kubectl apply -f k8s/deployments.yml
          kubectl apply -f k8s/services.yml
          kubectl apply -f k8s/hpa-api.yml
          kubectl rollout status deployment/product-service-api

      - name: Wait for deployment rollout
        run: |
           kubectl rollout status deployment/product-service-api --timeout=140s
